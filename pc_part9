from sklearn.model_selection import GridSearchCV

# Define the parameter grid
param_grid = {
    'C': [0.1, 1, 10, 100],
    'penalty': ['l1', 'l2'],
    'solver': ['liblinear']
}

# Initialize the grid search
grid_search = GridSearchCV(LogisticRegression(max_iter=1000), param_grid, cv=5)

# Fit the grid search to the data
grid_search.fit(X_train_tfidf, y_train)

# Print the best parameters and score
print("Best parameters found: ", grid_search.best_params_)
print("Best cross-validation score: ", grid_search.best_score_)

# Use the best estimator to predict on the validation and test sets
best_model = grid_search.best_estimator_
y_valid_pred = best_model.predict(X_valid_tfidf)
y_test_pred = best_model.predict(X_test_tfidf)

# Evaluate the best model
print("Validation Accuracy: ", accuracy_score(y_valid, y_valid_pred))
print(classification_report(y_valid, y_valid_pred))
print("Test Accuracy: ", accuracy_score(y_test, y_test_pred))
print(classification_report(y_test, y_test_pred))
